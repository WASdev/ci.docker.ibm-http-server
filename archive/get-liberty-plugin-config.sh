#!/usr/bin/env sh

if [ $# -lt 2 ]; then
    echo "USAGE: $0 <liberty-container-id> <hostname>"
    exit 0
fi

docker inspect "$1" | grep org.opencontainers.image.title | grep "Open Liberty" > /dev/null || {
    echo "Container '$1' does not look like an Open Liberty container"
    exit 1
}

docker cp $1:/opt/ol/wlp/output/defaultServer/logs/state/plugin-cfg.xml . || {
    echo "Unable to find plugin-cfg.xml. Check your server to make sure you have at least 1 application installed."
    exit 1
}

docker cp $1:/opt/ol/wlp/output/defaultServer/resources/security/key.p12 . || {
    echo "Unable to find key.p12. Check to make sure the security feature is enabled and properly configured."
    exit 1
}

SED_ARGS="-i -e"

if [[ "$(uname -s)" == "Darwin" ]]; then
    SED_ARGS="-i.tmp"
fi

# Substitute port information
port_regex='([0-9]+)/tcp -> .*:([0-9]+)'
docker port $1 | while read line ; do
    if [[ "$line" =~ $port_regex ]]; then
        CONTAINER_PORT="${BASH_REMATCH[1]}"
        HOST_PORT="${BASH_REMATCH[2]}"
        sed "${SED_ARGS}" "s/Port=\"${CONTAINER_PORT}\"/Port=\"${HOST_PORT}\"/g" plugin-cfg.xml
    else
        echo "ERROR: Unable to match port information against regex: '$line'"
    fi
done

# Substitute hostname
sed "${SED_ARGS}" "s/Hostname=\"[^\"]*\"/Hostname=\"$2\"/g" plugin-cfg.xml
sed "${SED_ARGS}" "s/LogLevel=\"Error\"/LogLevel=\"Trace\"/g" plugin-cfg.xml

# Update plugin root path
sed "${SED_ARGS}" "s#/opt/IBM/WebSphere/Plugins#/opt/IHS/plugin#g" plugin-cfg.xml

# Clean up temporary file generated by sed
if [[ "$(uname -s)" == "Darwin" ]]; then
    rm -f plugin-cfg.xml.tmp
fi